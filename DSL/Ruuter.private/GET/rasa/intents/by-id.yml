declaration:
  call: declare
  version: 0.1
  description: "Get intent with details by ID"
  method: get
  accepts: json
  returns: json
  namespace: training
  allowlist:
    headers:
      - field: cookie
        type: string
        description: "Cookie field"
    params:
      - field: intent
        type: string
        description: "Intent ID"

assignValues:
  assign:
    intent: ${incoming.params.intent}

# todo return intent object, not array

getIntent:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/intents/_search/template"
    body:
      id: "intent-with-name"
      params:
        intent: ${intent}
  result: getIntentResult

getDomainFile:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/internal/domain-file"
    headers:
      cookie: ${incoming.headers.cookie}
  result: getDomainDataResult

checkIfIntentExists:
  switch:
    - condition: ${getIntentResult.response.body.hits.hits != null}
      next: getServiceIntentConnections
  next: returnNoIntentFound

getServiceIntentConnections:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-service-intent-connections"
  result: getServiceIntentConnectionsResult

# todo if not using full, maybe modify to return one value
# todo is this broken?
getIntentListLastChanged:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-intents-list-last-changed"
    body:
      intentsList: ${getIntentResult.response.body.hits.hits[0]._id}
  result: getIntentListLastChangedResult

assignResults:
  assign:
    # todo singular, object
    intents:
      intents: ${getIntentResult.response.body.hits.hits}
      inmodel: ${getDomainDataResult.response.body.response.intents}
      connections: ${getServiceIntentConnectionsResult.response.body}
      intentsModifiedAt: ${getIntentListLastChangedResult.response.body}

mapIntentData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/hbs/training/get_intent_by_id"
    headers:
      type: "json"
    body:
      intents: ${intents}
  result: getIntentDataResult
  next: returnSuccess

returnSuccess:
  return: ${getIntentDataResult.response.body}
  next: end

returnNoIntentFound:
  return: "Error: no intent found"
  wrapper: false
  status: 404
  next: end
